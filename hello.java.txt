package com.itheima;

import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.zookeeper.CreateMode;
import org.junit.Test;

/**
 * @Author Sean
 * @Date 2021/1/4 11:35
 */
public class CreateDataTest {

    @Test
    public void createDataTest() throws Exception {
        /**
         *  RetryPolicy： 失败的重试策略的公共接口
         *  ExponentialBackoffRetry是 公共接口的其中一个实现类
         *     baseSleepTimeMs  参数1： 初始化sleep的时间，用于计算之后的每次重试的sleep时间
         *     maxRetries       参数2：最大重试次数
         *     maxSleepMs       参数3（可以省略）：最大sleep时间，如果上述的当前sleep计算出来比这个大，那么sleep用这个时间
         */
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000,1,1000);

        /**
         * connectString       参数1：连接的ip地址和端口号
         * sessionTimeoutMs    参数2：会话超时时间，单位毫秒
         * connectionTimeoutMs 参数3：连接超时时间，单位毫秒
         * retryPolicy         参数4：失败重试策略
         */
        // 创建客户端
        CuratorFramework client = CuratorFrameworkFactory.newClient("127.0.0.1:2181", 1000, 1000, retryPolicy);

        // 启动客户端
        client.start();

        /**
         * 创建节点，操作（CURD）
         */
        //1. 创建一个空节点(app)（只能创建一层节点）,path路径必须是/开头
        //client.create().forPath("/app");
        //2. 创建一个有内容的b节点（只能创建一层节点）
        //client.create().forPath("/a","hello".getBytes());
        //3. 创建持久节点，同时创建多层节点 withMode(CreateMode.PERSISTENT) 持久的
        //client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath("/b/c/d","nice".getBytes());
        //4. 创建带有的序号的持久节点 withMode(CreateMode.PERSISTENT_SEQUENTIAL) 持久有序的
        //client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath("/sqq","good".getBytes());
        //5. 创建临时节点（客户端关闭，节点消失），设置延时5秒关闭（Thread.sleep(5000)） withMode(CreateMode.EPHEMERAL)临时节点
        //client.create().withMode(CreateMode.EPHEMERAL).forPath("/temp","ok".getBytes());
        //6. 创建临时带序号节点（客户端关闭，节点消失），设置延时5秒关闭（Thread.sleep(5000)） withMode(CreateMode.EPHEMERAL_SEQUENTIAL)临时带序号的节点
        client.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath("/temp");

        Thread.sleep(5000);
        // 关闭客户端
        client.close();
    }
}
